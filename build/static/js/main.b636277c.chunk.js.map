{"version":3,"sources":["logo.svg","comp/BannerListItem.js","comp/CreativeList.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","BannerListItem","this","props","data","creativeIndex","bannerIndex","clicked","window","location","hash","console","log","isSelected","selected","MainCSS","onClick","_clicked","bind","title","Component","isSelectedCSS","css","styled","li","me","CreativeList","list","map","item","i","key","div","SIZES","BB","w","h","LB","App","p","bannerData","substr","hashArray","split","length","state","banners","setState","path","rootPath","creative","src","frameBorder","scrolling","width","type","height","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6JAAAA,EAAOC,QAAU,IAA0B,kC,wjBCIrCC,E,mLACS,IAAD,EAC8CC,KAAKC,MAAlDC,EADD,EACCA,KAAMC,EADP,EACOA,cAAeC,EADtB,EACsBA,YADtB,EACmCC,QACxCC,OAAOC,SAASC,KAAhB,UAA0BL,EAA1B,YAA2CC,GAC3CK,QAAQC,IAAIP,EAAeC,GAC3BJ,KAAKC,MAAMI,QAAQH,K,+BAGb,IAAD,EAC8CF,KAAKC,MAAlDC,EADD,EACCA,KACDS,GAFA,EACOR,cADP,EACsBC,YADtB,EACmCC,QACtBL,KAAKC,MAAMW,WAAWZ,KAAKC,MAAMC,MACpD,OACI,kBAACW,EAAD,CAASF,WAAYA,GACjB,uBAAGG,QAASd,KAAKe,SAASC,KAAKhB,OAAQE,EAAKe,Y,GAb/BC,aAmBvBC,EAAgBC,YAAH,KAObP,EAAUQ,IAAOC,GAAV,KAQP,SAAAC,GAAE,OAAEA,EAAGZ,YAAcQ,KAGZpB,I,sNCpCTyB,E,iLAES,IAAD,EAC2CxB,KAAKC,MAA/CC,EADD,EACCA,KAAMU,EADP,EACOA,SAAUT,EADjB,EACiBA,cAAeE,EADhC,EACgCA,QACtC,OACI,kBAAC,EAAD,KACI,4BAAKH,EAAKe,OACV,4BAEQf,EAAKuB,KAAKC,KAAI,SAACC,EAAMC,GAAP,OAAW,kBAAC,EAAD,CACrBzB,cAAeA,EACfC,YAAawB,EACbhB,SAAUA,EACVP,QAASA,EACTwB,IAAKD,EACL1B,KAAMyB,a,GAfPT,aAwBrBL,EAAUQ,IAAOS,IAAV,KAUEN,I,qbCjCf,IAAMO,EAAQ,CACZC,GAAI,CAACC,EAAE,IAAKC,EAAE,KACdC,GAAI,CAACF,EAAE,KAAMC,EAAE,KAGXE,E,YAEJ,WAAYC,GAAG,IAAD,uBACZ,4CAAMA,KAEDC,WAAahC,OAAOgC,WAEzB,IAAInC,EAAgB,EAChBC,EAAc,EAGdI,EAAOF,OAAOC,SAASC,KAAK+B,OAAO,GACvC,GAAG/B,EAAK,CACN,IAAMgC,EAAYhC,EAAKiC,MAAM,KACP,IAAnBD,EAAUE,SAEXvC,EAAgBqC,EAAU,GAC1BpC,EAAcoC,EAAU,IAfhB,OAoBZ,EAAKG,MAAQ,CAAC/B,SAAS,EAAK0B,WAAWM,QAAQzC,GAAesB,KAAKrB,IApBvD,E,sEAuBLQ,GACPZ,KAAK6C,SAAS,CAACjC,e,+BAGR,IAAD,OACCA,EAAYZ,KAAK2C,MAAjB/B,SACDkC,EAAI,UAAM9C,KAAKsC,WAAWS,UAAtB,OAAiCnC,EAASkC,MAEpD,OACE,kBAAC,EAAD,KACE,+BACA,4BAAK9C,KAAKsC,WAAWrB,OAEjBjB,KAAKsC,WAAWM,QAAQlB,KAAI,SAACsB,EAAUpB,GAAX,OAAe,kBAAC,EAAD,CAAczB,cAAeyB,EAAGhB,SAAUA,EAAUP,QAAS,EAAKU,SAASC,KAAK,GAAOa,IAAKD,EAAG1B,KAAM8C,QAGlJ,8BAEIpC,GAAY,4BAAQK,MAAM,QAAQgC,IAAKH,EAAMI,YAAY,IAAIC,UAAU,KAAKC,MAAOrB,EAAMnB,EAASyC,MAAMpB,EAAGqB,OAAQvB,EAAMnB,EAASyC,MAAMnB,U,GA3CpIhB,aAsDZL,EAAUQ,IAAOS,IAAV,KAsBEM,IC3EKmB,QACW,cAA7BjD,OAAOC,SAASiD,UAEe,UAA7BlD,OAAOC,SAASiD,UAEhBlD,OAAOC,SAASiD,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.b636277c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.25bf045c.svg\";","import React, { Component } from 'react'\nimport styled, {css} from 'styled-components'\n\n\nclass BannerListItem extends Component {\n    _clicked(){\n        const {data, creativeIndex, bannerIndex, clicked} = this.props\n         window.location.hash = `${creativeIndex}/${bannerIndex}`\n         console.log(creativeIndex, bannerIndex)\n         this.props.clicked(data)\n    }\n\n    render () {\n        const {data, creativeIndex, bannerIndex, clicked} = this.props\n        const isSelected = this.props.selected===this.props.data\n        return (\n            <MainCSS isSelected={isSelected}>\n                <p onClick={this._clicked.bind(this)}>{data.title}</p>\n            </MainCSS>\n        )\n    }\n}\n\nconst isSelectedCSS = css`\n    opacity: .5;\n    pointer-events: none;\n    color: black;\n    background-color: #CCC;\n`\n\nconst MainCSS = styled.li`\n    /* display: flex; */\n    cursor: pointer;\n    &:hover{\n        background-color: #CCC;\n    }\n    padding:5px;\n    margin-bottom: 8px;\n    ${me=>me.isSelected && isSelectedCSS};\n    \n`\nexport default BannerListItem","import React, { Component } from 'react'\nimport styled from 'styled-components'\nimport BannerListItem from './BannerListItem'\n\n\nclass CreativeList extends Component {\n\n    render () {\n        const {data, selected, creativeIndex, clicked} = this.props\n        return (\n            <MainCSS>\n                <h3>{data.title}</h3>\n                <ul>\n                    {\n                        data.list.map((item, i)=><BannerListItem  \n                            creativeIndex={creativeIndex} \n                            bannerIndex={i} \n                            selected={selected} \n                            clicked={clicked} \n                            key={i} \n                            data={item}></BannerListItem>)\n                    }\n                </ul>\n            </MainCSS>\n        )\n    }\n}\n\n\nconst MainCSS = styled.div`\n    display: block;\n    margin-bottom: 20px;\n    h3{\n        padding-bottom: 10px;\n    }\n    ul{\n        padding-left: 20px;\n    }\n`\nexport default CreativeList","import React, { Component } from 'react'\nimport logo from './logo.svg';\nimport styled from 'styled-components'\nimport './App.css';\nimport CreativeList from './comp/CreativeList';\n\nconst SIZES = {\n  BB: {w:300, h:250},\n  LB: {w:7287, h:90},\n}\n\nclass App extends Component {\n\n  constructor(p){\n    super(p)\n\n    this.bannerData = window.bannerData\n\n    let creativeIndex = 0\n    let bannerIndex = 0\n    \n    \n    var hash = window.location.hash.substr(1);\n    if(hash){\n      const hashArray = hash.split(\"/\")\n      if(hashArray.length===2){\n        \n        creativeIndex = hashArray[0]\n        bannerIndex = hashArray[1]\n        \n      }\n    }\n\n    this.state = {selected:this.bannerData.banners[creativeIndex].list[bannerIndex]}\n  }\n\n  _clicked(selected){    \n    this.setState({selected})\n  }\n\n  render(){\n    const {selected} = this.state\n    const path = `${this.bannerData.rootPath}${selected.path}`\n    \n    return (\n      <MainCSS>\n        <aside>\n        <h2>{this.bannerData.title}</h2>\n          {\n            this.bannerData.banners.map((creative, i)=><CreativeList creativeIndex={i} selected={selected} clicked={this._clicked.bind(this)} key={i} data={creative}/>)\n          }\n        </aside>\n          <main>\n            {\n              selected && <iframe title=\"hello\" src={path} frameBorder=\"0\" scrolling=\"no\" width={SIZES[selected.type].w} height={SIZES[selected.type].h}></iframe>\n            }\n            \n          </main>\n      </MainCSS>\n    );\n  }\n}\n\n\n\nconst MainCSS = styled.div`\n  display: flex;\n  font-family: Arial, Helvetica, sans-serif;\n  min-height: 100vh;\n  aside{    \n    flex: 0 0 200px;\n    padding: 40px 10px;\n    font-size: .85em;\n    h2{\n      font-size: 16px;\n      font-weight: 900;\n      margin-bottom: 10px;\n    }\n  }\n\n  main{    \n    padding: 20px 30px;\n    flex: 1 1 auto;\n    background-color: #f7f7f7;\n  }\n`\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}